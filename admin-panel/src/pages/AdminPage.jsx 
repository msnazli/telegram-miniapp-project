import React, { useEffect, useState } from 'react';
import { useEffect } from 'react';
import WebApp from '@twa-dev/sdk';
import AdminUsers from './AdminUsers';

const AdminPage = () => {
  const [languages, setLanguages] = useState([]);
  const [newLang, setNewLang] = useState('');
  const [selectedLang, setSelectedLang] = useState('');
  const [translations, setTranslations] = useState({});
  const [isAddingLang, setIsAddingLang] = useState(false);

  useEffect(() => {
    fetch('/api/translations/languages')
      .then(res => res.json())
      .then(data => setLanguages(data))
      .catch(console.error);
  }, []);

  useEffect(() => {
    if (selectedLang) {
      fetch(`/api/translations/${selectedLang}`)
        .then(res => res.json())
        .then(data => setTranslations(data.values || {}))
        .catch(console.error);
    }
  }, [selectedLang]);

  // افزودن زبان جدید
  const handleAddLanguage = async () => {
    if (!newLang.trim()) return;
    try {
      const res = await fetch('/api/translations', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ language: newLang }),
      });
      if (res.ok) {
        alert('زبان با موفقیت اضافه شد');
        setLanguages(prev => [...prev, newLang]);
        setNewLang('');
        setIsAddingLang(false);
      } else {
        const err = await res.json();
        alert(`خطا: ${err.error}`);
      }
    } catch {
      alert('خطا در افزودن زبان');
    }
  };

  // تغییر ترجمه‌ها (ساختار آبجکت)
  const handleChange = (path, value) => {
    const keys = path.split('.');
    setTranslations(prev => {
      const newTrans = { ...prev };
      let obj = newTrans;
      for (let i = 0; i < keys.length - 1; i++) {
        if (!obj[keys[i]]) obj[keys[i]] = {};
        obj = obj[keys[i]];
      }
      obj[keys[keys.length - 1]] = value;
      return newTrans;
    });
  };

  // ساخت فرم‌ها به صورت بازگشتی (برای نمایش کلیدهای دسته‌بندی شده)
  const renderInputs = (obj, parentKey = '') => {
    return Object.entries(obj).map(([key, value]) => {
      const fullKey = parentKey ? `${parentKey}.${key}` : key;
      if (typeof value === 'object' && value !== null) {
        return (
          <fieldset key={fullKey} style={{border:'1px solid #ccc', padding:'10px', margin:'10px 0'}}>
            <legend>{key}</legend>
            {renderInputs(value, fullKey)}
          </fieldset>
        );
      }
      return (
        <div key={fullKey} style={{marginBottom:'10px'}}>
          <label>{fullKey}</label>
          <input
            style={{width:'100%'}}
            value={value}
            onChange={(e) => handleChange(fullKey, e.target.value)}
          />
        </div>
      );
    });
  };

  // ذخیره ترجمه‌ها
  const handleSave = async () => {
    try {
      const res = await fetch(`/api/translations/${selectedLang}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(translations),
      });
      if (res.ok) alert('ذخیره شد');
      else alert('خطا در ذخیره');
    } catch {
      alert('خطا در ذخیره');
    }
  };

  // اکسپورت ترجمه‌ها به فایل
  const handleExport = async () => {
    if (!selectedLang) return alert('ابتدا زبان را انتخاب کنید');
    try {
      const res = await fetch(`/api/translations/export/${selectedLang}`);
      const data = await res.json();
      if (res.ok) alert(data.message);
      else alert('خطا در اکسپورت');
    } catch {
      alert('خطا در اکسپورت');
    }
  };

useEffect(() => {
  const userData = WebApp.initDataUnsafe.user;
  if (!userData) return;

  const authData = WebApp.initDataUnsafe;

  fetch('http://localhost:5000/api/auth/telegram-login', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(authData),
  })
    .then(res => res.json())
    .then(data => {
      if (data.token) {
        localStorage.setItem('token', data.token);
        alert('✅ ورود موفق');
      } else {
        alert('⛔ دسترسی مجاز نیست');
      }
    });
}, []);


  return (
    <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>
      <h2>مدیریت ترجمه‌ها</h2>

      {/* انتخاب زبان */}
      <div style={{ marginBottom: 10 }}>
        <label>انتخاب زبان:</label>
        <select
          value={selectedLang}
          onChange={e => setSelectedLang(e.target.value)}
          style={{ marginLeft: 10 }}
        >
          <option value="">انتخاب زبان</option>
          {languages.map(l => (
            <option key={l} value={l}>{l}</option>
          ))}
        </select>
      </div>

      {/* افزودن زبان */}
      <div style={{ marginBottom: 10 }}>
        {isAddingLang ? (
          <>
            <input
              placeholder="کد زبان مثل en, fa"
              value={newLang}
              onChange={e => setNewLang(e.target.value)}
            />
            <button onClick={handleAddLanguage}>ذخیره</button>
            <button onClick={() => { setIsAddingLang(false); setNewLang(''); }}>لغو</button>
          </>
        ) : (
          <button onClick={() => setIsAddingLang(true)}>➕ افزودن زبان جدید</button>
        )}
      </div>

      {/* فرم ویرایش ترجمه‌ها */}
      {selectedLang ? (
        <>
          <div style={{ marginBottom: 10 }}>
            {renderInputs(translations)}
          </div>
          <button onClick={handleSave} style={{ marginRight: 10 }}>ذخیره ترجمه‌ها</button>
          <button onClick={handleExport}>خروجی گرفتن به فایل JSON</button>
        </>
      ) : (
        <p>لطفاً یک زبان را انتخاب کنید.</p>
      )}
    </div>

    // در return:
<Tabs>
  <Tab title="مدیریت ترجمه‌ها"><TranslationManager /></Tab>
  <Tab title="کاربران"><AdminUsers /></Tab>
</Tabs>
  );
};

const [users, setUsers] = useState([]);

const fetchUsers = async () => {
  try {
    const res = await fetch('http://localhost:5000/api/users', {
      headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
    });
    const data = await res.json();
    setUsers(data);
  } catch (err) {
    console.error('User fetch error:', err);
  }
};

const handleRoleChange = async (userId, newRole) => {
  try {
    await fetch(`http://localhost:5000/api/users/${userId}/role`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
      body: JSON.stringify({ role: newRole }),
    });
    fetchUsers();
  } catch (err) {
    console.error('Error changing role:', err);
  }
};

useEffect(() => {
  fetchUsers();
}, []);

// پایین در JSX اضافه کن:
<div className="card mt-5 p-3">
  <h5>مدیریت کاربران</h5>
  <table className="table">
    <thead>
      <tr>
        <th>نام کاربری</th>
        <th>نقش</th>
        <th>تغییر نقش</th>
      </tr>
    </thead>
    <tbody>
      {users.map((u) => (
        <tr key={u._id}>
          <td>{u.username}</td>
          <td>{u.role}</td>
          <td>
            <select
              className="form-select"
              value={u.role}
              onChange={(e) => handleRoleChange(u._id, e.target.value)}
            >
              <option value="viewer">viewer</option>
              <option value="admin">admin</option>
            </select>
          </td>
        </tr>
      ))}
    </tbody>
  </table>
</div>

export default AdminPage;
